//
// Created on 4/30/24.
// Copyright Â© 2024 Turo Open Source. All rights reserved.
//

@_spi(Internal) import TestDRSCore

// swiftformat:disable spaceAroundOperators

// MARK: - Instance methods

/// Extension for `Spy` that provides expectation methods for verifying call counts and call order.
public extension Spy {

    /// Expects that the given function was called.
    ///
    /// - Parameters:
    ///   - function: A reference to the function to expect was called.
    ///   - signature: The signature of the function to check.
    ///   The signature can be obtained by right-clicking on the function's signature and selecting "Copy" > "Copy Symbol Name".
    ///   This should also match what is recorded by the `#function` macro.
    ///   - inputType: An optional phantom parameter used to derive the input type of the `function` passed in.
    ///   - outputType: An optional  phantom parameter used to derive the output type of the `function` passed in.
    ///   - file: **Do not pass in this argument**, it will automatically capture the file path where the expectation is being made.
    ///   - line: **Do not pass in this argument**, it will automatically capture the line number where the expectation is being made.
    /// - Returns: An `ExpectWasCalledResult` containing the matching function calls, or an empty array if no matching call was found.
    @discardableResult
    func expectWasCalled<Input, Output>(
        _ function: (Input) async throws -> Output,
        withSignature signature: FunctionSignature,
        taking inputType: Input.Type? = nil,
        returning outputType: Output.Type? = nil,
        file: StaticString = #file,
        line: UInt = #line
    ) -> ExpectWasCalledResult<MatchingAnyAmount, Input, Output> {
        blackBox.expectWasCalled(function, signature: signature, file: file, line: line)
    }

    /// Expects that the given function was called with the expected input.
    ///
    /// - Parameters:
    ///   - function: A reference to the function to expect was called.
    ///   - signature: The signature of the function to check.
    ///   The signature can be obtained by right-clicking on the function's signature and selecting "Copy" > "Copy Symbol Name".
    ///   This should also match what is recorded by the `#function` macro.
    ///   - expectedInput: The expected input parameter(s) for the function.
    ///   - outputType: An optional phantom parameter used to derive the output type of the `function` passed in.
    ///   - file: **Do not pass in this argument**, it will automatically capture the file path where the expectation is being made.
    ///   - line: **Do not pass in this argument**, it will automatically capture the line number where the expectation is being made.
    /// - Returns: An `ExpectWasCalledResult` containing the matching function calls, or an empty array if no matching call was found.
    @discardableResult
    func expectWasCalled<each Input, Output>(
        _ function: (repeat each Input) async throws -> Output,
        withSignature signature: FunctionSignature,
        expectedInput: repeat each Input,
        returning: Output.Type? = nil,
        file: StaticString = #file,
        line: UInt = #line
    ) -> ExpectWasCalledResult<MatchingAnyAmount, (repeat each Input), Output> where repeat each Input: Equatable {
        blackBox.expectWasCalled(function, signature: signature, expectedInput: repeat each expectedInput, file: file, line: line)
    }

    /// Expects that the given function was not called.
    ///
    /// - Parameters:
    ///   - function: A reference to the function to expect was not called.
    ///   - signature: The signature of the function to check.
    ///   The signature can be obtained by right-clicking on the function's signature and selecting "Copy" > "Copy Symbol Name".
    ///   This should also match what is recorded by the `#function` macro.
    ///   - inputType: An optional phantom parameter used to derive the input type of the `function` passed in.
    ///   - outputType: An optional  phantom parameter used to derive the output type of the `function` passed in.
    ///   - file: **Do not pass in this argument**, it will automatically capture the file path where the expectation is being made.
    ///   - line: **Do not pass in this argument**, it will automatically capture the line number where the expectation is being made.
    func expectWasNotCalled<Input, Output>(
        _ function: (Input) async throws -> Output,
        withSignature signature: FunctionSignature,
        taking inputType: Input.Type? = nil,
        returning outputType: Output.Type? = nil,
        file: StaticString = #file,
        line: UInt = #line
    ) {
        blackBox.expectWasNotCalled(function, signature: signature, file: file, line: line)
    }

}

// TODO: The static versions of each method could be generated by a macro.

// MARK: - Static methods

/// Extension for `Spy` that provides expectation methods for verifying call counts and call order.
public extension Spy {

    /// Expects that the given function was called.
    ///
    /// - Parameters:
    ///   - function: A reference to the function to expect was called.
    ///   - signature: The signature of the function to check.
    ///   The signature can be obtained by right-clicking on the function's signature and selecting "Copy" > "Copy Symbol Name".
    ///   This should also match what is recorded by the `#function` macro.
    ///   - inputType: An optional phantom parameter used to derive the input type of the `function` passed in.
    ///   - outputType: An optional  phantom parameter used to derive the output type of the `function` passed in.
    ///   - file: **Do not pass in this argument**, it will automatically capture the file path where the expectation is being made.
    ///   - line: **Do not pass in this argument**, it will automatically capture the line number where the expectation is being made.
    /// - Returns: An `ExpectWasCalledResult` containing the matching function calls, or an empty array if no matching call was found.
    @discardableResult
    static func expectStaticFunctionWasCalled<Input, Output>(
        _ function: (Input) async throws -> Output,
        withSignature signature: FunctionSignature,
        taking inputType: Input.Type? = nil,
        returning outputType: Output.Type? = nil,
        file: StaticString = #file,
        line: UInt = #line
    ) -> ExpectWasCalledResult<MatchingAnyAmount, Input, Output> {
        getStaticBlackBox().expectWasCalled(function, signature: signature, file: file, line: line)
    }

    /// Expects that the given function was called with the expected input.
    ///
    /// - Parameters:
    ///   - function: A reference to the function to expect was called.
    ///   - signature: The signature of the function to check.
    ///   The signature can be obtained by right-clicking on the function's signature and selecting "Copy" > "Copy Symbol Name".
    ///   This should also match what is recorded by the `#function` macro.
    ///   - expectedInput: The expected input parameter(s) for the function.
    ///   - outputType: An optional phantom parameter used to derive the output type of the `function` passed in.
    ///   - file: **Do not pass in this argument**, it will automatically capture the file path where the expectation is being made.
    ///   - line: **Do not pass in this argument**, it will automatically capture the line number where the expectation is being made.
    /// - Returns: An `ExpectWasCalledResult` containing the matching function calls, or an empty array if no matching call was found.
    @discardableResult
    static func expectStaticFunctionWasCalled<each Input, Output>(
        _ function: (repeat each Input) async throws -> Output,
        withSignature signature: FunctionSignature,
        expectedInput: repeat each Input,
        returning: Output.Type? = nil,
        file: StaticString = #file,
        line: UInt = #line
    ) -> ExpectWasCalledResult<MatchingAnyAmount, (repeat each Input), Output> where repeat each Input: Equatable {
        getStaticBlackBox().expectWasCalled(function, signature: signature, expectedInput: repeat each expectedInput, file: file, line: line)
    }

    /// Expects that the given function was not called.
    ///
    /// - Parameters:
    ///   - function: A reference to the function to expect was not called.
    ///   - signature: The signature of the function to check.
    ///   The signature can be obtained by right-clicking on the function's signature and selecting "Copy" > "Copy Symbol Name".
    ///   This should also match what is recorded by the `#function` macro.
    ///   - inputType: An optional phantom parameter used to derive the input type of the `function` passed in.
    ///   - outputType: An optional  phantom parameter used to derive the output type of the `function` passed in.
    ///   - file: **Do not pass in this argument**, it will automatically capture the file path where the expectation is being made.
    ///   - line: **Do not pass in this argument**, it will automatically capture the line number where the expectation is being made.
    static func expectStaticFunctionWasNotCalled<Input, Output>(
        _ function: (Input) async throws -> Output,
        withSignature signature: FunctionSignature,
        taking inputType: Input.Type? = nil,
        returning outputType: Output.Type? = nil,
        file: StaticString = #file,
        line: UInt = #line
    ) {
        getStaticBlackBox().expectWasNotCalled(function, signature: signature, file: file, line: line)
    }

}
