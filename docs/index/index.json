{
  "includedArchiveIdentifiers": [
    "TestDRS"
  ],
  "interfaceLanguages": {
    "swift": [
      {
        "children": [
          {
            "title": "Getting started",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testdrs/gettingstarted",
            "title": "Getting started with TestDRS",
            "type": "article"
          },
          {
            "title": "Creating test doubles",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testdrs/addmock()",
            "title": "macro AddMock()",
            "type": "macro"
          },
          {
            "path": "/documentation/testdrs/mock()",
            "title": "macro Mock()",
            "type": "macro"
          },
          {
            "title": "Stubbing methods",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testdrs/stub(_:taking:returning:)",
            "title": "macro stub<Input, Output>((Input) async throws -> Output, taking: Input.Type?, returning: Output)",
            "type": "macro"
          },
          {
            "path": "/documentation/testdrs/stub(_:taking:throwing:)",
            "title": "macro stub<Input, Output>((Input) async throws -> Output, taking: Input.Type?, throwing: any Error)",
            "type": "macro"
          },
          {
            "path": "/documentation/testdrs/stub(_:using:)",
            "title": "macro stub<Input, Output>((Input) async throws -> Output, using: (Input) throws -> Output)",
            "type": "macro"
          },
          {
            "title": "Verifying interactions",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testdrs/expectwascalled(_:taking:returning:mode:)",
            "title": "macro expectWasCalled<Input, Output>((Input) async throws -> Output, taking: Input.Type?, returning: Output.Type?, mode: ExpectedCallMode) -> ExpectWasCalledResult<MatchingAnyAmount, Input, Output>",
            "type": "macro"
          },
          {
            "path": "/documentation/testdrs/expectwascalled(_:with:returning:mode:)",
            "title": "macro expectWasCalled<each Input, Output>((repeat each Input) async throws -> Output, with: repeat each Input, returning: Output.Type?, mode: ExpectedCallMode) -> ExpectWasCalledResult<MatchingAnyAmount, (repeat each Input), Output>",
            "type": "macro"
          },
          {
            "path": "/documentation/testdrs/expectwasnotcalled(_:taking:returning:)",
            "title": "macro expectWasNotCalled<Input, Output>((Input) async throws -> Output, taking: Input.Type?, returning: Output.Type?)",
            "type": "macro"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/expectwascalledresult/matchingcall",
                "title": "var matchingCall: FunctionCall<Input, Output>?",
                "type": "property"
              },
              {
                "path": "/documentation/testdrs/expectwascalledresult/matchingcalls",
                "title": "var matchingCalls: [FunctionCall<Input, Output>]",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/expectwascalledresult/exactlyonce(fileid:filepath:line:column:)",
                "title": "func exactlyOnce(fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ExpectWasCalledResult<MatchingOne, Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/expectwascalledresult/getfirstmatchingcall()",
                "title": "func getFirstMatchingCall() throws -> FunctionCall<Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/expectwascalledresult/getlastmatchingcall()",
                "title": "func getLastMatchingCall() throws -> FunctionCall<Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/expectwascalledresult/getmatchingcall()",
                "title": "func getMatchingCall() throws -> FunctionCall<Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/expectwascalledresult/occurring(times:fileid:filepath:line:column:)",
                "title": "func occurring(times: Int, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ExpectWasCalledResult<MatchingSomeAmount, Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/expectwascalledresult/occurringwithin(times:fileid:filepath:line:column:)",
                "title": "func occurringWithin<R>(times: R, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ExpectWasCalledResult<MatchingSomeAmount, Input, Output>",
                "type": "method"
              }
            ],
            "path": "/documentation/testdrs/expectwascalledresult",
            "title": "ExpectWasCalledResult",
            "type": "struct"
          },
          {
            "title": "Asynchronous testing",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testdrs/testingasynchronouscode",
            "title": "Testing asynchronous code",
            "type": "article"
          },
          {
            "path": "/documentation/testdrs/confirmationofcall(to:taking:returning:timelimit:isolation:)",
            "title": "macro confirmationOfCall<Input, Output>(to: (Input) async throws -> Output, taking: Input.Type?, returning: Output.Type?, timeLimit: Duration, isolation: isolated (any Actor)?) -> FunctionCallConfirmation<MatchingFirst, Input, Output>",
            "type": "macro"
          },
          {
            "path": "/documentation/testdrs/confirmationofcall(to:with:returning:timelimit:isolation:)",
            "title": "macro confirmationOfCall<each Input, Output>(to: (repeat each Input) async throws -> Output, with: repeat each Input, returning: Output.Type?, timeLimit: Duration, isolation: isolated (any Actor)?) -> FunctionCallConfirmation<MatchingFirst, (repeat each Input), Output>",
            "type": "macro"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/functioncallconfirmation/matchingcall",
                "title": "var matchingCall: FunctionCall<Input, Output>?",
                "type": "property"
              },
              {
                "path": "/documentation/testdrs/functioncallconfirmation/matchingcalls",
                "title": "var matchingCalls: [FunctionCall<Input, Output>]",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/functioncallconfirmation/exactlyonce(fileid:filepath:line:column:)",
                "title": "func exactlyOnce(fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async -> FunctionCallConfirmation<MatchingOne, Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/functioncallconfirmation/getfirstmatchingcall()",
                "title": "func getFirstMatchingCall() throws -> FunctionCall<Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/functioncallconfirmation/getlastmatchingcall()",
                "title": "func getLastMatchingCall() throws -> FunctionCall<Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/functioncallconfirmation/getmatchingcall()",
                "title": "func getMatchingCall() throws -> FunctionCall<Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/functioncallconfirmation/occurring(times:fileid:filepath:line:column:)",
                "title": "func occurring(times: Int, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async -> FunctionCallConfirmation<MatchingSomeAmount, Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/functioncallconfirmation/occurringwithin(times:fileid:filepath:line:column:)",
                "title": "func occurringWithin<R>(times: R, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async -> FunctionCallConfirmation<MatchingSomeAmount, Input, Output>",
                "type": "method"
              }
            ],
            "path": "/documentation/testdrs/functioncallconfirmation",
            "title": "FunctionCallConfirmation",
            "type": "struct"
          },
          {
            "title": "Additional testing topics",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testdrs/mockingstaticmembers",
            "title": "Mocking static members",
            "type": "article"
          },
          {
            "path": "/documentation/testdrs/faq",
            "title": "Frequently Asked Questions",
            "type": "article"
          },
          {
            "title": "Classes",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/blackbox/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/blackbox/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testdrs/blackbox/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/testdrs/blackbox",
            "title": "BlackBox",
            "type": "class"
          },
          {
            "path": "/documentation/testdrs/statictestingcontext",
            "title": "StaticTestingContext",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/stubregistry/init()",
                "title": "init()",
                "type": "init"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/stubregistry/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testdrs/stubregistry/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/testdrs/stubregistry",
            "title": "StubRegistry",
            "type": "class"
          },
          {
            "title": "Protocols",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testdrs/functioncallamountmatching",
            "title": "FunctionCallAmountMatching",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Associated Types",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/lowerboundproviding/bound",
                "title": "Bound",
                "type": "associatedtype"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/lowerboundproviding/lowerbound",
                "title": "var lowerBound: Self.Bound",
                "type": "property"
              }
            ],
            "path": "/documentation/testdrs/lowerboundproviding",
            "title": "LowerBoundProviding",
            "type": "protocol"
          },
          {
            "path": "/documentation/testdrs/matchingmultiple",
            "title": "MatchingMultiple",
            "type": "protocol"
          },
          {
            "path": "/documentation/testdrs/matchingsingle",
            "title": "MatchingSingle",
            "type": "protocol"
          },
          {
            "path": "/documentation/testdrs/mock",
            "title": "Mock",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/spy/blackbox",
                "title": "var blackBox: BlackBox",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/spy/confirmationofcall(to:withsignature:expectedinput:returning:timelimit:isolation:fileid:filepath:line:column:)",
                "title": "func confirmationOfCall<each Input, Output>(to: (repeat each Input) async throws -> Output, withSignature: FunctionSignature, expectedInput: repeat each Input, returning: Output.Type?, timeLimit: Duration, isolation: isolated (any Actor)?, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async -> FunctionCallConfirmation<MatchingFirst, (repeat each Input), Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/spy/confirmationofcall(to:withsignature:taking:returning:timelimit:isolation:fileid:filepath:line:column:)",
                "title": "func confirmationOfCall<Input, Output>(to: (Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, returning: Output.Type?, timeLimit: Duration, isolation: isolated (any Actor)?, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async -> FunctionCallConfirmation<MatchingFirst, Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/spy/expectwascalled(_:withsignature:expectedinput:returning:mode:fileid:filepath:line:column:)",
                "title": "func expectWasCalled<each Input, Output>((repeat each Input) async throws -> Output, withSignature: FunctionSignature, expectedInput: repeat each Input, returning: Output.Type?, mode: ExpectedCallMode, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ExpectWasCalledResult<MatchingAnyAmount, (repeat each Input), Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/spy/expectwascalled(_:withsignature:taking:returning:mode:fileid:filepath:line:column:)",
                "title": "func expectWasCalled<Input, Output>((Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, returning: Output.Type?, mode: ExpectedCallMode, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ExpectWasCalledResult<MatchingAnyAmount, Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/spy/expectwasnotcalled(_:withsignature:taking:returning:fileid:filepath:line:column:)",
                "title": "func expectWasNotCalled<Input, Output>((Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, returning: Output.Type?, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/spy/recordcall(with:at:returning:signature:)-swift.method",
                "title": "func recordCall<Input, Output>(with: Input, at: Date, returning: Output.Type, signature: FunctionSignature)",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/spy/expectstaticfunctionwascalled(_:withsignature:expectedinput:returning:mode:fileid:filepath:line:column:)",
                "title": "static func expectStaticFunctionWasCalled<each Input, Output>((repeat each Input) async throws -> Output, withSignature: FunctionSignature, expectedInput: repeat each Input, returning: Output.Type?, mode: ExpectedCallMode, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ExpectWasCalledResult<MatchingAnyAmount, (repeat each Input), Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/spy/expectstaticfunctionwascalled(_:withsignature:taking:returning:mode:fileid:filepath:line:column:)",
                "title": "static func expectStaticFunctionWasCalled<Input, Output>((Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, returning: Output.Type?, mode: ExpectedCallMode, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ExpectWasCalledResult<MatchingAnyAmount, Input, Output>",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/spy/expectstaticfunctionwasnotcalled(_:withsignature:taking:returning:fileid:filepath:line:column:)",
                "title": "static func expectStaticFunctionWasNotCalled<Input, Output>((Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, returning: Output.Type?, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/spy/recordcall(with:at:returning:signature:)-swift.type.method",
                "title": "static func recordCall<Input, Output>(with: Input, at: Date, returning: Output.Type, signature: FunctionSignature)",
                "type": "method"
              }
            ],
            "path": "/documentation/testdrs/spy",
            "title": "Spy",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "path": "/documentation/testdrs/statictestable/register(with:)-44u4o",
                        "title": "static func register(with: inout StaticTestingContext)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testdrs/statictestable/register(with:)-761zh",
                        "title": "static func register(with: inout StaticTestingContext)",
                        "type": "method"
                      },
                      {
                        "path": "/documentation/testdrs/statictestable/register(with:)-9ol6n",
                        "title": "static func register(with: inout StaticTestingContext)",
                        "type": "method"
                      }
                    ],
                    "title": "StaticTestable Implementations",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/testdrs/statictestable/register(with:)-7epvj",
                "title": "static func register(with: inout StaticTestingContext)",
                "type": "method"
              }
            ],
            "path": "/documentation/testdrs/statictestable",
            "title": "StaticTestable",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/stubproviding/stubregistry",
                "title": "var stubRegistry: StubRegistry",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setdynamicstub(for:withsignature:using:)-swift.method",
                "title": "func setDynamicStub<Input, Output>(for: (Input) async throws -> Output, withSignature: FunctionSignature, using: (Input) throws -> Output)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setstub(for:withsignature:taking:returning:)-swift.method",
                "title": "func setStub<Input, Output>(for: (Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, returning: Output)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setstub(for:withsignature:taking:throwing:)-swift.method",
                "title": "func setStub<Input, Output>(for: (Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, throwing: any Error)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setstub(value:forpropertynamed:)-3obdw",
                "title": "func setStub(value: Any, forPropertyNamed: StaticString)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setstub(value:forpropertynamed:)-qwkg",
                "title": "func setStub(value: Any, forPropertyNamed: String)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/stuboutput(for:signature:)-swift.method",
                "title": "func stubOutput<Input, Output>(for: Input, signature: FunctionSignature) -> Output",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/stubvalue(for:)-swift.method",
                "title": "func stubValue<Output>(for: String) -> Output",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/throwingstuboutput(for:signature:)-swift.method",
                "title": "func throwingStubOutput<Input, Output>(for: Input, signature: FunctionSignature) throws -> Output",
                "type": "method"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setdynamicstub(for:withsignature:using:)-swift.type.method",
                "title": "static func setDynamicStub<Input, Output>(for: (Input) async throws -> Output, withSignature: FunctionSignature, using: (Input) throws -> Output)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setstub(for:withsignature:taking:returning:)-swift.type.method",
                "title": "static func setStub<Input, Output>(for: (Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, returning: Output)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setstub(for:withsignature:taking:throwing:)-swift.type.method",
                "title": "static func setStub<Input, Output>(for: (Input) async throws -> Output, withSignature: FunctionSignature, taking: Input.Type?, throwing: any Error)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setstub(value:forpropertynamed:)-3lvbo",
                "title": "static func setStub<Output>(value: Output, forPropertyNamed: String)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/setstub(value:forpropertynamed:)-9o67y",
                "title": "static func setStub<Output>(value: Output, forPropertyNamed: StaticString)",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/stuboutput(for:signature:)-swift.type.method",
                "title": "static func stubOutput<Input, Output>(for: Input, signature: FunctionSignature) -> Output",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/stubvalue(for:)-swift.type.method",
                "title": "static func stubValue<Output>(for: String) -> Output",
                "type": "method"
              },
              {
                "path": "/documentation/testdrs/stubproviding/throwingstuboutput(for:signature:)-swift.type.method",
                "title": "static func throwingStubOutput<Input, Output>(for: Input, signature: FunctionSignature) throws -> Output",
                "type": "method"
              }
            ],
            "path": "/documentation/testdrs/stubproviding",
            "title": "StubProviding",
            "type": "protocol"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/functioncall/id",
                "title": "let id: Int",
                "type": "property"
              },
              {
                "path": "/documentation/testdrs/functioncall/input",
                "title": "let input: Input",
                "type": "property"
              },
              {
                "path": "/documentation/testdrs/functioncall/signature",
                "title": "let signature: FunctionSignature",
                "type": "property"
              }
            ],
            "path": "/documentation/testdrs/functioncall",
            "title": "FunctionCall",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/functionsignature/debugdescription",
                    "title": "var debugDescription: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testdrs/functionsignature/customdebugstringconvertible-implementations",
                "title": "CustomDebugStringConvertible Implementations",
                "type": "symbol"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/functionsignature/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/testdrs/functionsignature/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/functionsignature/init(extendedgraphemeclusterliteral:)",
                    "title": "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/testdrs/functionsignature/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title": "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type": "symbol"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/functionsignature/init(stringliteral:)",
                    "title": "init(stringLiteral: String)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/testdrs/functionsignature/expressiblebystringliteral-implementations",
                "title": "ExpressibleByStringLiteral Implementations",
                "type": "symbol"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/functionsignature/init(unicodescalarliteral:)",
                    "title": "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/testdrs/functionsignature/expressiblebyunicodescalarliteral-implementations",
                "title": "ExpressibleByUnicodeScalarLiteral Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/testdrs/functionsignature",
            "title": "FunctionSignature",
            "type": "struct"
          },
          {
            "path": "/documentation/testdrs/sourcelocation",
            "title": "SourceLocation",
            "type": "struct"
          },
          {
            "title": "Functions",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/testdrs/withstatictestingcontext(operation:)",
            "title": "func withStaticTestingContext<R>(operation: () throws -> R) rethrows -> R",
            "type": "func"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/testdrs/expectedcallmode/exclusive",
                "title": "case exclusive",
                "type": "case"
              },
              {
                "path": "/documentation/testdrs/expectedcallmode/nonexclusive",
                "title": "case nonExclusive",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/expectedcallmode/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/testdrs/expectedcallmode/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/testdrs/expectedcallmode",
            "title": "ExpectedCallMode",
            "type": "enum"
          },
          {
            "path": "/documentation/testdrs/matchinganyamount",
            "title": "MatchingAnyAmount",
            "type": "enum"
          },
          {
            "path": "/documentation/testdrs/matchingfirst",
            "title": "MatchingFirst",
            "type": "enum"
          },
          {
            "path": "/documentation/testdrs/matchingone",
            "title": "MatchingOne",
            "type": "enum"
          },
          {
            "path": "/documentation/testdrs/matchingsomeamount",
            "title": "MatchingSomeAmount",
            "type": "enum"
          },
          {
            "title": "Extended Modules",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Extended Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Type Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/testdrs/swift/duration/maxtimelimit",
                    "title": "static let maxTimeLimit: Duration",
                    "type": "property"
                  }
                ],
                "path": "/documentation/testdrs/swift/duration",
                "title": "Duration",
                "type": "extension"
              }
            ],
            "path": "/documentation/testdrs/swift",
            "title": "Swift",
            "type": "extension"
          }
        ],
        "path": "/documentation/testdrs",
        "title": "TestDRS",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 2
  }
}
