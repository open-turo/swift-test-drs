{
  "abstract": [
    {
      "text": "A modern Swift testing library that provides powerful mocking, stubbing, and verification capabilities through Swift macros.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      []
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://TestDRS/documentation/TestDRS"
  },
  "kind": "symbol",
  "metadata": {
    "externalID": "TestDRS",
    "modules": [
      {
        "name": "TestDRS"
      }
    ],
    "role": "collection",
    "roleHeading": "Framework",
    "symbolKind": "module",
    "title": "TestDRS"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "Overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "TestDRS simplifies writing unit tests by generating test doubles (mocks) that you can use to isolate your code from its dependencies. It leverages Swift macros to reduce boilerplate and provide a type-safe, compiler-verified testing experience.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "With TestDRS, you can:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "items": [
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Create mock implementations of protocols, classes, and structs",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Stub function returns with specific values or dynamic behavior",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Verify that functions were called with the expected parameters",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Test asynchronous code with async/await support",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            },
            {
              "content": [
                {
                  "inlineContent": [
                    {
                      "text": "Test static members with proper isolation between tests",
                      "type": "text"
                    }
                  ],
                  "type": "paragraph"
                }
              ]
            }
          ],
          "type": "unorderedList"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://TestDRS/documentation/TestDRS": {
      "abstract": [
        {
          "text": "A modern Swift testing library that provides powerful mocking, stubbing, and verification capabilities through Swift macros.",
          "type": "text"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS",
      "kind": "symbol",
      "role": "collection",
      "title": "TestDRS",
      "type": "topic",
      "url": "/documentation/testdrs"
    },
    "doc://TestDRS/documentation/TestDRS/AddMock()": {
      "abstract": [
        {
          "text": "This macro generates a mock type based on a given protocol, class, or struct.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AddMock"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/AddMock()",
      "kind": "symbol",
      "role": "symbol",
      "title": "AddMock()",
      "type": "topic",
      "url": "/documentation/testdrs/addmock()"
    },
    "doc://TestDRS/documentation/TestDRS/BlackBox": {
      "abstract": [
        {
          "text": "A mechanism to record and look up function calls for testing purposes.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "BlackBox"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/BlackBox",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "BlackBox"
        }
      ],
      "role": "symbol",
      "title": "BlackBox",
      "type": "topic",
      "url": "/documentation/testdrs/blackbox"
    },
    "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult": {
      "abstract": [
        {
          "code": "ExpectWasCalledResult",
          "type": "codeVoice"
        },
        {
          "text": " is a struct that encapsulates the result of an ",
          "type": "text"
        },
        {
          "code": "#expectWasCalled",
          "type": "codeVoice"
        },
        {
          "text": " expectation.",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "It contains any calls that match the expectation and provides methods for expecting the number of times the given call was recorded.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpectWasCalledResult"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpectWasCalledResult"
        }
      ],
      "role": "symbol",
      "title": "ExpectWasCalledResult",
      "type": "topic",
      "url": "/documentation/testdrs/expectwascalledresult"
    },
    "doc://TestDRS/documentation/TestDRS/ExpectedCallMode": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpectedCallMode"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/ExpectedCallMode",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpectedCallMode"
        }
      ],
      "role": "symbol",
      "title": "ExpectedCallMode",
      "type": "topic",
      "url": "/documentation/testdrs/expectedcallmode"
    },
    "doc://TestDRS/documentation/TestDRS/FAQ": {
      "abstract": [
        {
          "text": "Common questions and answers about using TestDRS.",
          "type": "text"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/FAQ",
      "kind": "article",
      "role": "article",
      "title": "Frequently Asked Questions",
      "type": "topic",
      "url": "/documentation/testdrs/faq"
    },
    "doc://TestDRS/documentation/TestDRS/FunctionCall": {
      "abstract": [
        {
          "text": "A concrete implementation of ",
          "type": "text"
        },
        {
          "code": "FunctionCallRepresentation",
          "type": "codeVoice"
        },
        {
          "text": " that captures a function call\u2019s details.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FunctionCall"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/FunctionCall",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FunctionCall"
        }
      ],
      "role": "symbol",
      "title": "FunctionCall",
      "type": "topic",
      "url": "/documentation/testdrs/functioncall"
    },
    "doc://TestDRS/documentation/TestDRS/FunctionCallAmountMatching": {
      "abstract": [
        {
          "text": "A protocol that represents different ways of matching function call counts during verification.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FunctionCallAmountMatching"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/FunctionCallAmountMatching",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FunctionCallAmountMatching"
        }
      ],
      "role": "symbol",
      "title": "FunctionCallAmountMatching",
      "type": "topic",
      "url": "/documentation/testdrs/functioncallamountmatching"
    },
    "doc://TestDRS/documentation/TestDRS/FunctionCallConfirmation": {
      "abstract": [
        {
          "text": "Encapsulates the result of a ",
          "type": "text"
        },
        {
          "code": "#confirmationOfCall",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FunctionCallConfirmation"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/FunctionCallConfirmation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FunctionCallConfirmation"
        }
      ],
      "role": "symbol",
      "title": "FunctionCallConfirmation",
      "type": "topic",
      "url": "/documentation/testdrs/functioncallconfirmation"
    },
    "doc://TestDRS/documentation/TestDRS/FunctionSignature": {
      "abstract": [
        {
          "code": "FunctionSignature",
          "type": "codeVoice"
        },
        {
          "text": " is used to represent the signature of a function.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "FunctionSignature"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/FunctionSignature",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "FunctionSignature"
        }
      ],
      "role": "symbol",
      "title": "FunctionSignature",
      "type": "topic",
      "url": "/documentation/testdrs/functionsignature"
    },
    "doc://TestDRS/documentation/TestDRS/GettingStarted": {
      "abstract": [
        {
          "text": "Learn how to use TestDRS to create and use mocks in your Swift unit tests.",
          "type": "text"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/GettingStarted",
      "kind": "article",
      "role": "article",
      "title": "Getting started with TestDRS",
      "type": "topic",
      "url": "/documentation/testdrs/gettingstarted"
    },
    "doc://TestDRS/documentation/TestDRS/LowerBoundProviding": {
      "abstract": [
        {
          "text": "TestDRS supports using ranges that have a lower bound in order to verify call counts.",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "This protocol allows for using ",
          "type": "text"
        },
        {
          "code": "PartialRangeFrom",
          "type": "codeVoice"
        },
        {
          "text": ", ",
          "type": "text"
        },
        {
          "code": "Range",
          "type": "codeVoice"
        },
        {
          "text": ", or ",
          "type": "text"
        },
        {
          "code": "ClosedRange",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "LowerBoundProviding"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/LowerBoundProviding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "LowerBoundProviding"
        }
      ],
      "role": "symbol",
      "title": "LowerBoundProviding",
      "type": "topic",
      "url": "/documentation/testdrs/lowerboundproviding"
    },
    "doc://TestDRS/documentation/TestDRS/MatchingAnyAmount": {
      "abstract": [
        {
          "text": "A matching strategy that accepts any number of function calls, including zero.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MatchingAnyAmount"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/MatchingAnyAmount",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MatchingAnyAmount"
        }
      ],
      "role": "symbol",
      "title": "MatchingAnyAmount",
      "type": "topic",
      "url": "/documentation/testdrs/matchinganyamount"
    },
    "doc://TestDRS/documentation/TestDRS/MatchingFirst": {
      "abstract": [
        {
          "text": "A matching strategy that examines only the first call in a sequence of calls.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MatchingFirst"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/MatchingFirst",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MatchingFirst"
        }
      ],
      "role": "symbol",
      "title": "MatchingFirst",
      "type": "topic",
      "url": "/documentation/testdrs/matchingfirst"
    },
    "doc://TestDRS/documentation/TestDRS/MatchingMultiple": {
      "abstract": [
        {
          "text": "A protocol for matching strategies that can handle multiple function calls.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MatchingMultiple"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/MatchingMultiple",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MatchingMultiple"
        }
      ],
      "role": "symbol",
      "title": "MatchingMultiple",
      "type": "topic",
      "url": "/documentation/testdrs/matchingmultiple"
    },
    "doc://TestDRS/documentation/TestDRS/MatchingOne": {
      "abstract": [
        {
          "text": "A matching strategy that requires exactly one function call.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MatchingOne"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/MatchingOne",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MatchingOne"
        }
      ],
      "role": "symbol",
      "title": "MatchingOne",
      "type": "topic",
      "url": "/documentation/testdrs/matchingone"
    },
    "doc://TestDRS/documentation/TestDRS/MatchingSingle": {
      "abstract": [
        {
          "text": "A protocol for matching strategies that handle at most a single function call.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MatchingSingle"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/MatchingSingle",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MatchingSingle"
        }
      ],
      "role": "symbol",
      "title": "MatchingSingle",
      "type": "topic",
      "url": "/documentation/testdrs/matchingsingle"
    },
    "doc://TestDRS/documentation/TestDRS/MatchingSomeAmount": {
      "abstract": [
        {
          "text": "A matching strategy that verifies a specific number or range of function calls.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "enum"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "MatchingSomeAmount"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/MatchingSomeAmount",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "MatchingSomeAmount"
        }
      ],
      "role": "symbol",
      "title": "MatchingSomeAmount",
      "type": "topic",
      "url": "/documentation/testdrs/matchingsomeamount"
    },
    "doc://TestDRS/documentation/TestDRS/Mock": {
      "abstract": [
        {
          "text": "A protocol that combines stubbing and spying functionality for comprehensive test doubles.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Mock"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/Mock",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Mock"
        }
      ],
      "role": "symbol",
      "title": "Mock",
      "type": "topic",
      "url": "/documentation/testdrs/mock"
    },
    "doc://TestDRS/documentation/TestDRS/Mock()": {
      "abstract": [
        {
          "text": "This macro mocks the members of the struct or class that it is applied to.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Mock"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/Mock()",
      "kind": "symbol",
      "role": "symbol",
      "title": "Mock()",
      "type": "topic",
      "url": "/documentation/testdrs/mock()"
    },
    "doc://TestDRS/documentation/TestDRS/SourceLocation": {
      "abstract": [
        {
          "text": "The location in source code where an event occurred, used to attribute a test failure to a location in code.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "SourceLocation"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/SourceLocation",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "SourceLocation"
        }
      ],
      "role": "symbol",
      "title": "SourceLocation",
      "type": "topic",
      "url": "/documentation/testdrs/sourcelocation"
    },
    "doc://TestDRS/documentation/TestDRS/Spy": {
      "abstract": [
        {
          "text": "A protocol that enables observing and verifying function calls during testing.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Spy"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/Spy",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Spy"
        }
      ],
      "role": "symbol",
      "title": "Spy",
      "type": "topic",
      "url": "/documentation/testdrs/spy"
    },
    "doc://TestDRS/documentation/TestDRS/StaticTestable": {
      "abstract": [
        {
          "text": "A type whose static members can be tested using a ",
          "type": "text"
        },
        {
          "code": "StaticTestingContext",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StaticTestable"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/StaticTestable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StaticTestable"
        }
      ],
      "role": "symbol",
      "title": "StaticTestable",
      "type": "topic",
      "url": "/documentation/testdrs/statictestable"
    },
    "doc://TestDRS/documentation/TestDRS/StaticTestingContext": {
      "abstract": [],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StaticTestingContext"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/StaticTestingContext",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StaticTestingContext"
        }
      ],
      "role": "symbol",
      "title": "StaticTestingContext",
      "type": "topic",
      "url": "/documentation/testdrs/statictestingcontext"
    },
    "doc://TestDRS/documentation/TestDRS/StubProviding": {
      "abstract": [
        {
          "code": "StubProviding",
          "type": "codeVoice"
        },
        {
          "text": " is a protocol that defines a stubbing mechanism for unit testing.",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "It allows you to replace real method calls with stubbed responses, making it easier to test your code in isolation.",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "Each stub is associated with the function\u2019s signature, input type, and output type.",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "This information is used to retrieve the stub when the function is called.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StubProviding"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/StubProviding",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StubProviding"
        }
      ],
      "role": "symbol",
      "title": "StubProviding",
      "type": "topic",
      "url": "/documentation/testdrs/stubproviding"
    },
    "doc://TestDRS/documentation/TestDRS/StubRegistry": {
      "abstract": [
        {
          "text": "Handles registering and retrieving stubs for members, meant to be used with the ",
          "type": "text"
        },
        {
          "code": "StubProviding",
          "type": "codeVoice"
        },
        {
          "text": " protocol.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "class"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "StubRegistry"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/StubRegistry",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "StubRegistry"
        }
      ],
      "role": "symbol",
      "title": "StubRegistry",
      "type": "topic",
      "url": "/documentation/testdrs/stubregistry"
    },
    "doc://TestDRS/documentation/TestDRS/Swift": {
      "abstract": [],
      "identifier": "doc://TestDRS/documentation/TestDRS/Swift",
      "kind": "symbol",
      "role": "collection",
      "title": "Swift",
      "type": "topic",
      "url": "/documentation/testdrs/swift"
    },
    "doc://TestDRS/documentation/TestDRS/TestingAsynchronousCode": {
      "abstract": [
        {
          "text": "Learn best practices for testing asynchronous Swift code with TestDRS.",
          "type": "text"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/TestingAsynchronousCode",
      "kind": "article",
      "role": "article",
      "title": "Testing asynchronous code",
      "type": "topic",
      "url": "/documentation/testdrs/testingasynchronouscode"
    },
    "doc://TestDRS/documentation/TestDRS/TestingStaticMembers": {
      "abstract": [
        {
          "text": "Learn how to test code that uses static members by creating mocks with TestDRS.",
          "type": "text"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/TestingStaticMembers",
      "kind": "article",
      "role": "article",
      "title": "Testing static members",
      "type": "topic",
      "url": "/documentation/testdrs/testingstaticmembers"
    },
    "doc://TestDRS/documentation/TestDRS/confirmationOfCall(to:taking:returning:timeLimit:isolation:)": {
      "abstract": [
        {
          "text": "Awaits confirmation of a function call.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "confirmationOfCall"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "taking"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "returning"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "timeLimit"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8DurationV",
          "text": "Duration"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS24FunctionCallConfirmationV",
          "text": "FunctionCallConfirmation"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS13MatchingFirstO",
          "text": "MatchingFirst"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/confirmationOfCall(to:taking:returning:timeLimit:isolation:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "confirmationOfCall(to:taking:returning:timeLimit:isolation:)",
      "type": "topic",
      "url": "/documentation/testdrs/confirmationofcall(to:taking:returning:timelimit:isolation:)"
    },
    "doc://TestDRS/documentation/TestDRS/confirmationOfCall(to:with:returning:timeLimit:isolation:)": {
      "abstract": [
        {
          "text": "Awaits confirmation of a function call with an expected input.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "confirmationOfCall"
        },
        {
          "kind": "text",
          "text": "<each "
        },
        {
          "kind": "genericParameter",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": (repeat each "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": repeat each "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "returning"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "timeLimit"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8DurationV",
          "text": "Duration"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "isolation"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "isolated"
        },
        {
          "kind": "text",
          "text": " (any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ScA",
          "text": "Actor"
        },
        {
          "kind": "text",
          "text": ")?) -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS24FunctionCallConfirmationV",
          "text": "FunctionCallConfirmation"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS13MatchingFirstO",
          "text": "MatchingFirst"
        },
        {
          "kind": "text",
          "text": ", (repeat each "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": "), "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/confirmationOfCall(to:with:returning:timeLimit:isolation:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "confirmationOfCall(to:with:returning:timeLimit:isolation:)",
      "type": "topic",
      "url": "/documentation/testdrs/confirmationofcall(to:with:returning:timelimit:isolation:)"
    },
    "doc://TestDRS/documentation/TestDRS/expectWasCalled(_:taking:returning:mode:)": {
      "abstract": [
        {
          "text": "Expects that the given function was called.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "expectWasCalled"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "taking"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "returning"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "mode"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS16ExpectedCallModeO",
          "text": "ExpectedCallMode"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS21ExpectWasCalledResultV",
          "text": "ExpectWasCalledResult"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS17MatchingAnyAmountO",
          "text": "MatchingAnyAmount"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/expectWasCalled(_:taking:returning:mode:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "expectWasCalled(_:taking:returning:mode:)",
      "type": "topic",
      "url": "/documentation/testdrs/expectwascalled(_:taking:returning:mode:)"
    },
    "doc://TestDRS/documentation/TestDRS/expectWasCalled(_:with:returning:mode:)": {
      "abstract": [
        {
          "text": "Expects that the given function was called with the expected input.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "expectWasCalled"
        },
        {
          "kind": "text",
          "text": "<each "
        },
        {
          "kind": "genericParameter",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">((repeat each "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "kind": "text",
          "text": ": repeat each "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "returning"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "mode"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS16ExpectedCallModeO",
          "text": "ExpectedCallMode"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS21ExpectWasCalledResultV",
          "text": "ExpectWasCalledResult"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS17MatchingAnyAmountO",
          "text": "MatchingAnyAmount"
        },
        {
          "kind": "text",
          "text": ", (repeat each "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": "), "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/expectWasCalled(_:with:returning:mode:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "expectWasCalled(_:with:returning:mode:)",
      "type": "topic",
      "url": "/documentation/testdrs/expectwascalled(_:with:returning:mode:)"
    },
    "doc://TestDRS/documentation/TestDRS/expectWasNotCalled(_:taking:returning:)": {
      "abstract": [
        {
          "text": "Expects that the given function was not called.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "expectWasNotCalled"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "taking"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "returning"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ".Type?)"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/expectWasNotCalled(_:taking:returning:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "expectWasNotCalled(_:taking:returning:)",
      "type": "topic",
      "url": "/documentation/testdrs/expectwasnotcalled(_:taking:returning:)"
    },
    "doc://TestDRS/documentation/TestDRS/stub(_:taking:returning:)": {
      "abstract": [
        {
          "text": "Sets a stub for a given function to return a provided output.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "stub"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "taking"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "returning"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/stub(_:taking:returning:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "stub(_:taking:returning:)",
      "type": "topic",
      "url": "/documentation/testdrs/stub(_:taking:returning:)"
    },
    "doc://TestDRS/documentation/TestDRS/stub(_:taking:throwing:)": {
      "abstract": [
        {
          "text": "Sets a stub for a given function to throw a provided error.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "stub"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "taking"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ".Type?, "
        },
        {
          "kind": "externalParam",
          "text": "throwing"
        },
        {
          "kind": "text",
          "text": ": any "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s5ErrorP",
          "text": "Error"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/stub(_:taking:throwing:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "stub(_:taking:throwing:)",
      "type": "topic",
      "url": "/documentation/testdrs/stub(_:taking:throwing:)"
    },
    "doc://TestDRS/documentation/TestDRS/stub(_:using:)": {
      "abstract": [
        {
          "text": "Sets a stub for a given function using a closure to dynamically determine the output.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "stub"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "async"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/stub(_:using:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "stub(_:using:)",
      "type": "topic",
      "url": "/documentation/testdrs/stub(_:using:)"
    },
    "doc://TestDRS/documentation/TestDRS/withStaticTestingContext(operation:)": {
      "abstract": [
        {
          "text": "Creates a ",
          "type": "text"
        },
        {
          "code": "StaticTestingContext",
          "type": "codeVoice"
        },
        {
          "text": " for testing the given ",
          "type": "text"
        },
        {
          "code": "StaticTestable",
          "type": "codeVoice"
        },
        {
          "text": " types during the duration of the operation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withStaticTestingContext"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "operation"
        },
        {
          "kind": "text",
          "text": ": () "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/withStaticTestingContext(operation:)",
      "kind": "symbol",
      "role": "symbol",
      "title": "withStaticTestingContext(operation:)",
      "type": "topic",
      "url": "/documentation/testdrs/withstatictestingcontext(operation:)"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "topicSections": [
    {
      "anchor": "Getting-started",
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/GettingStarted"
      ],
      "title": "Getting started"
    },
    {
      "abstract": [
        {
          "text": "Test doubles are objects that stand in for real objects in your tests. This section covers how to create mocks that you can use to test your code in isolation.",
          "type": "text"
        }
      ],
      "anchor": "Creating-test-doubles",
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/AddMock()",
        "doc://TestDRS/documentation/TestDRS/Mock()"
      ],
      "title": "Creating test doubles"
    },
    {
      "abstract": [
        {
          "text": "Once you have a mock, you can control how it behaves by stubbing its methods to return specific values or throw errors.",
          "type": "text"
        }
      ],
      "anchor": "Stubbing-methods",
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/stub(_:taking:returning:)",
        "doc://TestDRS/documentation/TestDRS/stub(_:taking:throwing:)",
        "doc://TestDRS/documentation/TestDRS/stub(_:using:)"
      ],
      "title": "Stubbing methods"
    },
    {
      "abstract": [
        {
          "text": "After running your code under test, you\u2019ll often want to verify that it interacted with your mock in the expected way.",
          "type": "text"
        }
      ],
      "anchor": "Verifying-interactions",
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/expectWasCalled(_:taking:returning:mode:)",
        "doc://TestDRS/documentation/TestDRS/expectWasCalled(_:with:returning:mode:)",
        "doc://TestDRS/documentation/TestDRS/expectWasNotCalled(_:taking:returning:)",
        "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult"
      ],
      "title": "Verifying interactions"
    },
    {
      "abstract": [
        {
          "text": "These tools help you test asynchronous code by allowing you to await and verify function calls that might happen in the future.",
          "type": "text"
        }
      ],
      "anchor": "Asynchronous-testing",
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/TestingAsynchronousCode",
        "doc://TestDRS/documentation/TestDRS/confirmationOfCall(to:taking:returning:timeLimit:isolation:)",
        "doc://TestDRS/documentation/TestDRS/confirmationOfCall(to:with:returning:timeLimit:isolation:)",
        "doc://TestDRS/documentation/TestDRS/FunctionCallConfirmation"
      ],
      "title": "Asynchronous testing"
    },
    {
      "anchor": "Additional-testing-topics",
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/TestingStaticMembers",
        "doc://TestDRS/documentation/TestDRS/FAQ"
      ],
      "title": "Additional testing topics"
    },
    {
      "anchor": "Classes",
      "generated": true,
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/BlackBox",
        "doc://TestDRS/documentation/TestDRS/StaticTestingContext",
        "doc://TestDRS/documentation/TestDRS/StubRegistry"
      ],
      "title": "Classes"
    },
    {
      "anchor": "Protocols",
      "generated": true,
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/FunctionCallAmountMatching",
        "doc://TestDRS/documentation/TestDRS/LowerBoundProviding",
        "doc://TestDRS/documentation/TestDRS/MatchingMultiple",
        "doc://TestDRS/documentation/TestDRS/MatchingSingle",
        "doc://TestDRS/documentation/TestDRS/Mock",
        "doc://TestDRS/documentation/TestDRS/Spy",
        "doc://TestDRS/documentation/TestDRS/StaticTestable",
        "doc://TestDRS/documentation/TestDRS/StubProviding"
      ],
      "title": "Protocols"
    },
    {
      "anchor": "Structures",
      "generated": true,
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/FunctionCall",
        "doc://TestDRS/documentation/TestDRS/FunctionSignature",
        "doc://TestDRS/documentation/TestDRS/SourceLocation"
      ],
      "title": "Structures"
    },
    {
      "anchor": "Functions",
      "generated": true,
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/withStaticTestingContext(operation:)"
      ],
      "title": "Functions"
    },
    {
      "anchor": "Enumerations",
      "generated": true,
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/ExpectedCallMode",
        "doc://TestDRS/documentation/TestDRS/MatchingAnyAmount",
        "doc://TestDRS/documentation/TestDRS/MatchingFirst",
        "doc://TestDRS/documentation/TestDRS/MatchingOne",
        "doc://TestDRS/documentation/TestDRS/MatchingSomeAmount"
      ],
      "title": "Enumerations"
    },
    {
      "anchor": "Extended-Modules",
      "generated": true,
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/Swift"
      ],
      "title": "Extended Modules"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/testdrs"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
