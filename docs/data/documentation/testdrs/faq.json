{"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/TestDRS\/documentation\/TestDRS\/FAQ"},"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/TestDRS\/documentation\/TestDRS\/TestingStaticMembers"],"title":"Additional testing topics","anchor":"Additional-testing-topics"}],"variants":[{"paths":["\/documentation\/testdrs\/faq"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Common questions and answers about using TestDRS."}],"primaryContentSections":[{"content":[{"text":"How do I test that a closure was called?","anchor":"How-do-I-test-that-a-closure-was-called","type":"heading","level":2},{"inlineContent":[{"text":"Since closures are just unnamed functions in Swift, you can create a mock type to stand in for your closure:","type":"text"}],"type":"paragraph"},{"code":["\/\/ Step 1: Create a mock to stand in for your closure","@Mock","struct CallbackHandler {","    func onComplete(result: Result<Data, Error>)","}","","\/\/ Step 2: Use the mock in your test","func testClosureIsCalled() {","    \/\/ Arrange","    let mockCallback = CallbackHandler()","    let dataLoader = DataLoader()","    ","    \/\/ Act - pass the mock's function directly as the completion handler","    dataLoader.loadData(completion: mockCallback.onComplete)","    ","    \/\/ Assert","    #expectWasCalled(mockCallback.onComplete)","        .exactlyOnce()","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"anchor":"How-do-I-verify-the-arguments-of-non-Equatable-types","text":"How do I verify the arguments of non-Equatable types?"},{"type":"paragraph","inlineContent":[{"text":"When dealing with non-Equatable types, you can use ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/TestDRS\/documentation\/TestDRS\/ExpectWasCalledResult\/getMatchingCall()"},{"type":"text","text":" to access the function call and examine its input:"}]},{"type":"codeListing","code":["\/\/ Access a single call","let result = #expectWasCalled(mockProcessor.processComplexData).exactlyOnce()","let call = try result.getMatchingCall()","","\/\/ Destructure the input into the individual arguments","let (id, metadata) = call.input","","\/\/ Assert on those arguments","XCTAssertEqual(id, \"expected-id\")","XCTAssertTrue(metadata.contains(\"important-flag\"))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/TestDRS\/documentation\/TestDRS\/ExpectWasCalledResult","isActive":true},{"text":" for additional methods for accessing function calls.","type":"text"}]},{"type":"heading","text":"Is there a way to reset mock history between test cases?","anchor":"Is-there-a-way-to-reset-mock-history-between-test-cases","level":2},{"inlineContent":[{"type":"text","text":"TestDRS does not currently have a way to reset a mock. Generally, you should create a new mock instance for each test. If you find yourself wanting to reset a mock during a test, consider if that test should be refactored into multiple tests."}],"type":"paragraph"},{"inlineContent":[{"text":"For static mocks, use ","type":"text"},{"type":"codeVoice","code":"withStaticTestingContext"},{"text":" to isolate test cases, as described in the ","type":"text"},{"identifier":"doc:\/\/TestDRS\/documentation\/TestDRS\/TestingStaticMembers","isActive":true,"type":"reference"},{"text":" article.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"TestDRS"}],"title":"Frequently Asked Questions"},"hierarchy":{"paths":[["doc:\/\/TestDRS\/documentation\/TestDRS"]]},"references":{"doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult/getMatchingCall()":{"abstract":[{"type":"text","text":"Gets the matching call if it exists, or throws an "},{"code":"ExpectWasCalledResultError","type":"codeVoice"},{"text":" if no calls were made that match the expectation.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"getMatchingCall","kind":"identifier"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7TestDRS12FunctionCallV","text":"FunctionCall"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"text":">","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"AmountMatching"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"MatchingSingle"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/TestDRS\/documentation\/TestDRS\/ExpectWasCalledResult\/getMatchingCall()","title":"getMatchingCall()","type":"topic","kind":"symbol","url":"\/documentation\/testdrs\/expectwascalledresult\/getmatchingcall()"},"doc://TestDRS/documentation/TestDRS/TestingStaticMembers":{"url":"\/documentation\/testdrs\/testingstaticmembers","role":"article","title":"Testing static members","identifier":"doc:\/\/TestDRS\/documentation\/TestDRS\/TestingStaticMembers","abstract":[{"type":"text","text":"Learn how to test code that uses static members by creating mocks with TestDRS."}],"kind":"article","type":"topic"},"doc://TestDRS/documentation/TestDRS":{"title":"TestDRS","type":"topic","url":"\/documentation\/testdrs","abstract":[{"type":"text","text":"A modern Swift testing library that provides powerful mocking, stubbing, and verification capabilities through Swift macros."}],"kind":"symbol","identifier":"doc:\/\/TestDRS\/documentation\/TestDRS","role":"collection"},"doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult":{"kind":"symbol","title":"ExpectWasCalledResult","navigatorTitle":[{"kind":"identifier","text":"ExpectWasCalledResult"}],"identifier":"doc:\/\/TestDRS\/documentation\/TestDRS\/ExpectWasCalledResult","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpectWasCalledResult"}],"abstract":[{"code":"ExpectWasCalledResult","type":"codeVoice"},{"type":"text","text":" is a struct that encapsulates the result of an "},{"type":"codeVoice","code":"#expectWasCalled"},{"text":" expectation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It contains any calls that match the expectation and provides methods for expecting the number of times the given call was recorded."}],"role":"symbol","type":"topic","url":"\/documentation\/testdrs\/expectwascalledresult"}}}