{
  "abstract": [
    {
      "text": "Common questions and answers about using TestDRS.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://TestDRS/documentation/TestDRS"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://TestDRS/documentation/TestDRS/FAQ"
  },
  "kind": "article",
  "metadata": {
    "modules": [
      {
        "name": "TestDRS"
      }
    ],
    "role": "article",
    "roleHeading": "Article",
    "title": "Frequently Asked Questions"
  },
  "primaryContentSections": [
    {
      "content": [
        {
          "anchor": "How-do-I-test-that-a-closure-was-called",
          "level": 2,
          "text": "How do I test that a closure was called?",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Since closures are just unnamed functions in Swift, you can create a mock type to stand in for your closure:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Step 1: Create a mock to stand in for your closure",
            "@Mock",
            "struct CallbackHandler {",
            "    func onComplete(result: Result<Data, Error>)",
            "}",
            "",
            "// Step 2: Use the mock in your test",
            "func testClosureIsCalled() {",
            "    // Arrange",
            "    let mockCallback = CallbackHandler()",
            "    let dataLoader = DataLoader()",
            "",
            "    // Act - pass the mock's function directly as the completion handler",
            "    dataLoader.loadData(completion: mockCallback.onComplete)",
            "",
            "    // Assert",
            "    #expectWasCalled(mockCallback.onComplete)",
            "        .exactlyOnce()",
            "}"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "anchor": "How-do-I-verify-the-arguments-of-non-Equatable-types",
          "level": 2,
          "text": "How do I verify the arguments of non-Equatable types?",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When dealing with non-Equatable types, you can use ",
              "type": "text"
            },
            {
              "identifier": "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult/getMatchingCall()",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " to access the function call and examine its input:",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "code": [
            "// Access a single call",
            "let result = #expectWasCalled(mockProcessor.processComplexData).exactlyOnce()",
            "let call = try result.getMatchingCall()",
            "",
            "// Destructure the input into the individual arguments",
            "let (id, metadata) = call.input",
            "",
            "// Assert on those arguments",
            "XCTAssertEqual(id, \"expected-id\")",
            "XCTAssertTrue(metadata.contains(\"important-flag\"))"
          ],
          "syntax": "swift",
          "type": "codeListing"
        },
        {
          "inlineContent": [
            {
              "text": "See ",
              "type": "text"
            },
            {
              "identifier": "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult",
              "isActive": true,
              "type": "reference"
            },
            {
              "text": " for additional methods for accessing function calls.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "anchor": "Is-there-a-way-to-reset-mock-history-between-test-cases",
          "level": 2,
          "text": "Is there a way to reset mock history between test cases?",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "TestDRS does not currently have a way to reset a mock. Generally, you should create a new mock instance for each test. If you find yourself wanting to reset a mock during a test, consider if that test should be refactored into multiple tests.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "For static mocks, use ",
              "type": "text"
            },
            {
              "code": "withStaticTestingContext",
              "type": "codeVoice"
            },
            {
              "text": " to isolate test cases, as described in the ",
              "type": "text"
            },
            {
              "text": "doc:TestingStaticMembers",
              "type": "text"
            },
            {
              "text": " article.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://TestDRS/documentation/TestDRS": {
      "abstract": [
        {
          "text": "A modern Swift testing library that provides powerful mocking, stubbing, and verification capabilities through Swift macros.",
          "type": "text"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS",
      "kind": "symbol",
      "role": "collection",
      "title": "TestDRS",
      "type": "topic",
      "url": "/documentation/testdrs"
    },
    "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult": {
      "abstract": [
        {
          "code": "ExpectWasCalledResult",
          "type": "codeVoice"
        },
        {
          "text": " is a struct that encapsulates the result of an ",
          "type": "text"
        },
        {
          "code": "#expectWasCalled",
          "type": "codeVoice"
        },
        {
          "text": " expectation.",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "It contains any calls that match the expectation and provides methods for expecting the number of times the given call was recorded.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ExpectWasCalledResult"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ExpectWasCalledResult"
        }
      ],
      "role": "symbol",
      "title": "ExpectWasCalledResult",
      "type": "topic",
      "url": "/documentation/testdrs/expectwascalledresult"
    },
    "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult/getMatchingCall()": {
      "abstract": [
        {
          "text": "Gets the matching call if it exists, or throws an ",
          "type": "text"
        },
        {
          "code": "ExpectWasCalledResultError",
          "type": "codeVoice"
        },
        {
          "text": " if no calls were made that match the expectation.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "AmountMatching",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "MatchingSingle",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "getMatchingCall"
        },
        {
          "kind": "text",
          "text": "() "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:7TestDRS12FunctionCallV",
          "text": "FunctionCall"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Input"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Output"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/ExpectWasCalledResult/getMatchingCall()",
      "kind": "symbol",
      "role": "symbol",
      "title": "getMatchingCall()",
      "type": "topic",
      "url": "/documentation/testdrs/expectwascalledresult/getmatchingcall()"
    },
    "doc://TestDRS/documentation/TestDRS/MockingStaticMembers": {
      "abstract": [
        {
          "text": "Learn how to test code that uses static members by creating mocks with TestDRS.",
          "type": "text"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/MockingStaticMembers",
      "kind": "article",
      "role": "article",
      "title": "Mocking static members",
      "type": "topic",
      "url": "/documentation/testdrs/mockingstaticmembers"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Additional-testing-topics",
      "generated": true,
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/MockingStaticMembers"
      ],
      "title": "Additional testing topics"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/testdrs/faq"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
