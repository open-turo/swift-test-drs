{
  "abstract": [
    {
      "text": "This macro mocks the members of the struct or class that it is applied to.",
      "type": "text"
    }
  ],
  "hierarchy": {
    "paths": [
      [
        "doc://TestDRS/documentation/TestDRS"
      ]
    ]
  },
  "identifier": {
    "interfaceLanguage": "swift",
    "url": "doc://TestDRS/documentation/TestDRS/Mock()"
  },
  "kind": "symbol",
  "metadata": {
    "externalID": "s:7TestDRS4Mockyycfm",
    "fragments": [
      {
        "kind": "keyword",
        "text": "macro"
      },
      {
        "kind": "text",
        "text": " "
      },
      {
        "kind": "identifier",
        "text": "Mock"
      },
      {
        "kind": "text",
        "text": "()"
      }
    ],
    "modules": [
      {
        "name": "TestDRS"
      }
    ],
    "role": "symbol",
    "roleHeading": "Macro",
    "symbolKind": "macro",
    "title": "Mock()"
  },
  "primaryContentSections": [
    {
      "declarations": [
        {
          "languages": [
            "swift"
          ],
          "platforms": [
            "macOS"
          ],
          "tokens": [
            {
              "kind": "attribute",
              "text": "@attached"
            },
            {
              "kind": "text",
              "text": "(extension, conformances: "
            },
            {
              "identifier": "doc://TestDRS/documentation/TestDRS/Mock",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7TestDRS4MockP",
              "text": "Mock"
            },
            {
              "kind": "text",
              "text": ") "
            },
            {
              "kind": "attribute",
              "text": "@attached"
            },
            {
              "kind": "text",
              "text": "(member, conformances: "
            },
            {
              "identifier": "doc://TestDRS/documentation/TestDRS/Mock",
              "kind": "typeIdentifier",
              "preciseIdentifier": "s:7TestDRS4MockP",
              "text": "Mock"
            },
            {
              "kind": "text",
              "text": ", names: named(blackBox), named(stubRegistry)) "
            },
            {
              "kind": "attribute",
              "text": "@attached"
            },
            {
              "kind": "text",
              "text": "(memberAttribute) "
            },
            {
              "kind": "keyword",
              "text": "macro"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "identifier",
              "text": "Mock"
            },
            {
              "kind": "text",
              "text": "()"
            }
          ]
        }
      ],
      "kind": "declarations"
    },
    {
      "content": [
        {
          "anchor": "overview",
          "level": 2,
          "text": "Overview",
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Properties of the attached type should not be initialized inline (using an initializer is allowed, but not required)",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and functions should not have bodies.",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "In most circumstances the attached type should conform to a protocol,",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "so an easy way to generate the member definitions is to just apply the fixit that pops up after adopting the protocol",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "and then delete the empty bodies of the functions.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "This macro adds conformance to the ",
              "type": "text"
            },
            {
              "code": "StubProviding",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "Spy",
              "type": "codeVoice"
            },
            {
              "text": " protocols. This allows you to stub out each method and expect that methods were called in your tests.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        }
      ],
      "kind": "content"
    }
  ],
  "references": {
    "doc://TestDRS/documentation/TestDRS": {
      "abstract": [
        {
          "text": "A modern Swift testing library that provides powerful mocking, stubbing, and verification capabilities through Swift macros.",
          "type": "text"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS",
      "kind": "symbol",
      "role": "collection",
      "title": "TestDRS",
      "type": "topic",
      "url": "/documentation/testdrs"
    },
    "doc://TestDRS/documentation/TestDRS/AddMock()": {
      "abstract": [
        {
          "text": "This macro generates a mock type based on a given protocol, class, or struct.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AddMock"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/AddMock()",
      "kind": "symbol",
      "role": "symbol",
      "title": "AddMock()",
      "type": "topic",
      "url": "/documentation/testdrs/addmock()"
    },
    "doc://TestDRS/documentation/TestDRS/Mock": {
      "abstract": [
        {
          "text": "A protocol that combines stubbing and spying functionality for comprehensive test doubles.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Mock"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/Mock",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Mock"
        }
      ],
      "role": "symbol",
      "title": "Mock",
      "type": "topic",
      "url": "/documentation/testdrs/mock"
    },
    "doc://TestDRS/documentation/TestDRS/Mock()": {
      "abstract": [
        {
          "text": "This macro mocks the members of the struct or class that it is applied to.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "macro"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Mock"
        },
        {
          "kind": "text",
          "text": "()"
        }
      ],
      "identifier": "doc://TestDRS/documentation/TestDRS/Mock()",
      "kind": "symbol",
      "role": "symbol",
      "title": "Mock()",
      "type": "topic",
      "url": "/documentation/testdrs/mock()"
    }
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "sections": [],
  "seeAlsoSections": [
    {
      "anchor": "Creating-test-doubles",
      "generated": true,
      "identifiers": [
        "doc://TestDRS/documentation/TestDRS/AddMock()"
      ],
      "title": "Creating test doubles"
    }
  ],
  "variants": [
    {
      "paths": [
        "/documentation/testdrs/mock()"
      ],
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ]
    }
  ]
}
